%%
%% Generate src/egraph_version.erl automatically
%%

CommitShortHash = string:strip(os:cmd("git show --format='%h' -s"), right, 10).
LastUpdate = string:strip(os:cmd("git show --format='%cD' -s"), right, 10).
CommitTitle = string:strip(os:cmd("git show --format='%s' -s"), right, 10).
CurrentBranch = string:strip(os:cmd("git rev-parse --abbrev-ref HEAD"), right, 10).
LocalChanges = string:strip(os:cmd("git status -s"), right, 10).

CleanedCommitTitle = re:replace(CommitTitle, "\"", "'", [global, {return, list}]).

{ok, Fd} = file:open("src/egraph_version.erl", write),
io:format(Fd, "%% This file is autogenerated and any changes will\n", []).
io:format(Fd, "%% be lost upon next build.\n\n", []).
io:format(Fd, "-module(egraph_version).\n\n-export([hash/0, last_update/0, title/0, branch/0, status/0]).\n\n", []).
io:format(Fd, "hash() -> <<\"~s\">>.\n\n", [CommitShortHash]).
io:format(Fd, "last_update() -> <<\"~s\">>.\n\n", [LastUpdate]).
io:format(Fd, "title() -> <<\"~s\">>.\n\n", [CleanedCommitTitle]).
io:format(Fd, "branch() -> <<\"~s\">>.\n\n", [CurrentBranch]).
io:format(Fd, "status() -> <<\"~s\">>.\n\n", [LocalChanges]).
file:close(Fd).


OverrideForRiakCore = [{override, riak_ensemble,
              [{erl_opts, [debug_info,
                           warn_untyped_record,
                           {parse_transform, lager_transform}]}]},

             {override, riak_core,
              [{erl_opts, [{parse_transform, lager_transform},
                           debug_info, {platform_define, "^[0-9]+", namespaced_types},
                           {platform_define, "18", old_rand},
                           {platform_define, "17", old_rand},
                           {platform_define, "^R15", old_hash}]}]},

             {override, poolboy,
              [{erl_opts, [debug_info,
                           {platform_define, "^[0-9]+", namespaced_types}]}]}],

case os:type() of
    {win32, _} ->
        ok;
    {osx, _} ->
        JiffyDbOverride = {overrides , [
              {override , eleveldb, [{ pre_hooks , [{ compile , "make" }]}]}
              ]},
        OsxProdProfile = {prod, [{relx, [{dev_mode, false},
                                         {include_src, false},
                                         {include_erts, true}]}
                                        ]},
        Config2 = lists:keystore(overrides, 1, CONFIG, {overrides, [JiffyDbOverride | OverrideForRiakCore]}),
        lists:keystore(profiles, 1, Config2, {profiles, [OsxProdProfile]});
    _ ->
        JiffyOverride = {override, jiffy, [
                           {plugins, [pc]},
                           % for linux|unix
                           {artifacts, ["priv/jiffy.so"]},
                           {provider_hooks, [
                               {post,
                                   [
                                       {compile, {pc, compile}},
                                       {clean, {pc, clean}}
                                   ]
                               }]
                           }
                        ]},
        Config2 = lists:keystore(overrides, 1, CONFIG, {overrides, [JiffyOverride | OverrideForRiakCore]}),
        LinuxProdProfile = {prod, [{relx, [{dev_mode, false},
                                             {include_src, false},
                                             {include_erts, true}]}
                                             ]},
        lists:keystore(profiles, 1, Config2, {profiles, [LinuxProdProfile]})
end.
